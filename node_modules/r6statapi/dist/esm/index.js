import { Auth } from './methods/auth';
import { GetUserByUsername } from './methods/getUserByUsername';
import { GetUserByUserId } from './methods/getUserByUserId';
import { GetUserProgression } from './methods/getUserProgression.js';
import { GetServerStatus } from './methods/getServerStatus';
import { GetUserRank } from './methods/getUserRank.js';
import { GetOperator } from './methods/getOperator';
// import { GetUserStats, UserStats } from './methods/GetUserStats';
import { Search } from './methods/searchMarketplace';
import { RecommendedItems } from './methods/recommendedItems';
import { getItemDetails } from './methods/getItemDetails';
import { AdvancedSearch } from './methods/advancedSearchMarketplace';
import { GetTransactionsPending } from './methods/getPendingTransactions';
import { GetTransactionHistroy } from './methods/getTransactionHistory';
export class R6StatAPI {
    async login(email, password) {
        return await Auth(email, password);
    }
    async getUserByUsername(username, platform) {
        return await GetUserByUsername(username, platform);
    }
    async getUserByUserId(userId) {
        return await GetUserByUserId(userId);
    }
    async getUserProgression(userId) {
        return await GetUserProgression(userId);
    }
    async getServerStatus(platform) {
        return await GetServerStatus(platform);
    }
    async getUserRank(userId, platform) {
        return await GetUserRank(userId, platform);
    }
    async getUserOperators(userId, platform, view, aggregation, gameMode, teamRole, season) {
        return await GetOperator(userId, platform, view, aggregation, gameMode, teamRole, season);
    }
    // TODO fix this
    // public async getUserStats(
    //   userId: string,
    //   platform: string,
    //   view: string,
    //   aggregation: string,
    //   gameMode: string,
    //   teamRole: string,
    //   season: string
    // ): Promise<UserStats> {
    //   return await GetUserStats(userId, platform, view, aggregation, gameMode, teamRole, season);
    // }
    async SearchMarketplace(searchQuery, limit) {
        return await Search(searchQuery, limit);
    }
    async getRecommendedItems(profileId, limit) {
        return await RecommendedItems(profileId, limit);
    }
    async getItemDetails(itemId) {
        return await getItemDetails(itemId);
    }
    async advancedMarketplaceSearch(searchTerm, marketplaceType, types, tags, sortBy, limit) {
        return await AdvancedSearch(searchTerm, marketplaceType, types, tags, sortBy, limit);
    }
    async GetPendingtransactions(profileId, limit) {
        return await GetTransactionsPending(profileId, limit);
    }
    async GetTransactionHistory(profileId, limit) {
        return await GetTransactionHistroy(profileId, limit);
    }
}
//# sourceMappingURL=index.js.map