import { ItemRarity, Weapons, Operators, Event, EsportsTeams, OtherTypes, PurchaseAvailableHighLow, PurchaseAvailableLowHigh, SaleAvailableHighLow, SaleAvailableLowHigh, LastSalePriceHighLow, LastSalePriceLowHigh, ItemNamesDESC, ItemNamesASC, } from '../interfaces/marketplace';
// ============== Marketplace Helper Functions ==============
const defaultSellStats = {
    id: '',
    paymentItemId: '',
    lowestPrice: 0,
    highestPrice: 0,
    activeCount: 0,
};
const defaultBuyStats = {
    id: '',
    paymentItemId: '',
    lowestPrice: 0,
    highestPrice: 0,
    activeCount: 0,
};
const defaultLostSoldAt = {
    id: '',
    paymentItemId: '',
    price: 0,
    performedAt: '',
};
export const MapMarketData = async (marketplaceData) => {
    const id = marketplaceData.id;
    const sellStats = Array.isArray(marketplaceData?.sellStats) && marketplaceData.sellStats.length > 0
        ? {
            id: marketplaceData.sellStats[0].id,
            paymentItemId: marketplaceData.sellStats[0].paymentItemId,
            lowestPrice: marketplaceData.sellStats[0].lowestPrice,
            highestPrice: marketplaceData.sellStats[0].highestPrice,
            activeCount: marketplaceData.sellStats[0].activeCount,
        }
        : defaultSellStats;
    const buyStats = Array.isArray(marketplaceData?.buyStats) && marketplaceData.buyStats.length > 0
        ? {
            id: marketplaceData.buyStats[0].id,
            paymentItemId: marketplaceData.buyStats[0].paymentItemId,
            lowestPrice: marketplaceData.buyStats[0].lowestPrice,
            highestPrice: marketplaceData.buyStats[0].highestPrice,
            activeCount: marketplaceData.buyStats[0].activeCount,
        }
        : defaultBuyStats;
    const lastSoldAt = Array.isArray(marketplaceData?.lastSoldAt) && marketplaceData.lastSoldAt.length > 0
        ? {
            id: marketplaceData.lastSoldAt[0].id,
            paymentItemId: marketplaceData.lastSoldAt[0].paymentItemId,
            price: marketplaceData.lastSoldAt[0].price,
            performedAt: marketplaceData.lastSoldAt[0].performedAt,
        }
        : defaultLostSoldAt;
    const marketData = {
        id: id,
        sellStats: sellStats,
        buyStats: buyStats,
        lastSoldAt: lastSoldAt,
    };
    return marketData;
};
export const BuildItemRarity = async (ItemRarityArray) => {
    if (ItemRarityArray.length === 0)
        return [];
    const rarity = [];
    ItemRarityArray.forEach(itemRarity => {
        const enumValue = ItemRarity[itemRarity];
        if (enumValue)
            rarity.push(enumValue);
        else
            console.log("Enum values doesn't exists");
    });
    return rarity;
};
export const BuildWeapons = async (WeaponsArray) => {
    if (WeaponsArray.length === 0)
        return [];
    const weapons = [];
    WeaponsArray.forEach(weapon => {
        const enumValue = Weapons[weapon];
        if (enumValue)
            weapons.push(enumValue);
        else
            console.log('Enum value not found');
    });
    return weapons;
};
export const BuildOperators = async (operatorsArray) => {
    if (operatorsArray.length === 0)
        return [];
    const operators = [];
    operatorsArray.forEach(operator => {
        const enumValue = Operators[operator];
        if (enumValue)
            operators.push(enumValue);
        else
            console.log('enum value was not found');
    });
    return operators;
};
export const BuildEvents = async (eventsArray) => {
    if (eventsArray.length === 0)
        return [];
    const events = [];
    eventsArray.forEach(event => {
        const enumValue = Event[event];
        if (enumValue)
            events.push(enumValue);
        else
            console.log('enum value not found');
    });
    return events;
};
export const BuildEsportTeams = async (esportTeamsArray) => {
    if (esportTeamsArray.length === 0)
        return [];
    const esportsTeam = [];
    esportTeamsArray.forEach(team => {
        const enumValue = EsportsTeams[team];
        if (enumValue)
            esportsTeam.push(enumValue);
        else
            console.log('enum value not found');
    });
    return esportsTeam;
};
export const BuildOtherTypes = async (otherTypesArray) => {
    if (otherTypesArray.length === 0)
        return [];
    const otherTypes = [];
    otherTypesArray.forEach(otherType => {
        const enumValue = OtherTypes[otherType];
        if (enumValue)
            otherTypes.push(enumValue);
        else
            console.log('enum value not found');
    });
    return otherTypes;
};
export const ReturnSortBy = async (sortBy, searchType) => {
    switch (sortBy) {
        case 'Purchase available: high to low':
            return PurchaseAvailableHighLow;
        case 'Purchase available: low to high':
            return PurchaseAvailableLowHigh;
        case 'Sale available: high to low':
            return SaleAvailableHighLow;
        case 'Sale available: low to high':
            return SaleAvailableLowHigh;
        case 'Last sale price: high to low':
            return LastSalePriceHighLow;
        case 'Last sale price: low to high':
            return LastSalePriceLowHigh;
        case 'Item names: A-Z':
            return ItemNamesDESC;
        case 'Item names: Z-A':
            ItemNamesASC;
            break;
        default:
            if (searchType === 'sell')
                return PurchaseAvailableHighLow;
            else
                return SaleAvailableHighLow;
    }
};
export const BuildTradeItems = async (tradeItems) => {
    const defaultItem = {
        id: '',
        assetUrl: '',
        itemId: '',
        name: '',
        tags: [],
        type: '',
    };
    if (!tradeItems || tradeItems.length === 0) {
        return defaultItem;
    }
    const { id, itemId, assetUrl, name, tags, type } = tradeItems[0].item;
    return {
        id,
        itemId,
        assetUrl,
        name,
        tags,
        type,
    };
};
export const BuildPaymentOptions = async (options) => {
    const defualtPaymentOptions = {
        quantity: 0,
        price: 0,
        transactionFee: 0,
    };
    if (!options || options.length === 0)
        return defualtPaymentOptions;
    const { quantity } = options[0].item.viewer.meta;
    const { price, transactionFee } = options[0];
    return {
        quantity,
        price,
        transactionFee,
    };
};
export const BuildPayment = async (payment) => {
    const defualtPayment = {
        price: 0,
        transactionFee: 0,
    };
    if (!payment || payment.length === 0)
        return defualtPayment;
    const { price, transactionFee } = payment;
    return {
        price,
        transactionFee,
    };
};
// ==========================================================
//# sourceMappingURL=helperFunctions.js.map