"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetExperation = exports.CheckToken = exports.Auth = void 0;
const axios_1 = __importDefault(require("axios"));
const constants_1 = require("../constants");
const fs_1 = require("fs");
const FileName = 'Auth.json';
let Email = '';
let Password = '';
let Token = '';
let NextRefresh = '';
let Experation = '';
const Auth = async (email, password) => {
    const currentTime = new Date().toISOString();
    if (!email || !password)
        throw new Error(`Please check email: ${email} and password: ${password}`);
    if (Token !== '' && currentTime < NextRefresh) {
        return Token;
    }
    if (email && password !== undefined) {
        Email = email;
        Password = password;
    }
    const newToken = await RequestToken(Email, Password);
    return newToken.ticket;
};
exports.Auth = Auth;
const RequestToken = async (email, password) => {
    console.log('Refreshing Token...');
    const headers = {
        Authorization: `Basic ${Buffer.from(`${email}:${password}`).toString('base64')}`,
        'Ubi-AppId': constants_1.UBI_APPID,
        'Content-Type': 'application/json',
    };
    const URI = (0, constants_1.BASE_UBI_URI)(3) + constants_1.UBI_AUTH_URI;
    const response = await axios_1.default.post(URI, {}, { headers });
    const data = response.data;
    Token = data.ticket;
    NextRefresh = data.expiration;
    Experation = data.expiration;
    (0, fs_1.writeFile)(FileName, JSON.stringify(data, null, 2), err => {
        if (err) {
            console.error('Error writing to file', err);
        }
        else {
            console.log('Token data has been saved to file!');
        }
    });
    return data;
};
const CheckToken = async () => {
    const currentTime = new Date().toISOString();
    if (Token !== '' && currentTime < NextRefresh) {
        console.log('Retrieving token from memory');
        return Token;
    }
    else
        return (await RequestToken(Email, Password)).ticket;
};
exports.CheckToken = CheckToken;
const GetExperation = async () => {
    return Experation;
};
exports.GetExperation = GetExperation;
//# sourceMappingURL=auth.js.map