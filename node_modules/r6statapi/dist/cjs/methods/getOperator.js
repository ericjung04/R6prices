"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetOperator = void 0;
const apiClient_1 = require("./apiClient");
const auth_1 = require("./auth");
const constants_1 = require("../constants");
const GetOperator = async (userId, platform, view, aggregation, gameMode, teamRole, season) => {
    if (userId || platform || view || aggregation || gameMode || teamRole || season === '')
        throw new Error(`Please check userId: ${userId}, platform: ${platform}, view: ${view}, aggregation: ${aggregation}, gameMode: ${gameMode}, teamRole: ${teamRole}, season: ${season}`);
    var token = await (0, auth_1.CheckToken)();
    var expiration = await (0, auth_1.GetExperation)();
    const header = {
        'Content-Type': 'application/json',
        Authorization: `ubi_v1 t=${token}`,
        'Ubi-SessionId': constants_1.UBI_RANKED_SESSIONID,
        'Ubi-AppId': constants_1.UBI_DATADEV_APPID,
        expiration: expiration,
    };
    const platformChange = platform === 'uplay' ? 'PC' : 'CONSOLE';
    const spaceId = constants_1.RANKED_UBI_SPACEIDS.find(x => x.id === platformChange)?.value;
    if (!spaceId)
        throw new Error('Unable to find spaceId');
    const URI = constants_1.UBI_DATADEV_URI +
        (0, constants_1.UBI_GETSTATS)(userId, spaceId, platformChange, view, aggregation, gameMode, teamRole, season);
    // https://prod.datadev.ubisoft.com/v1/users/488cd0dd-b8e0-4718-a9da-2767ea44c399/playerstats?spaceId=05bfb3f7-6c21-4c42-be1f-97a33fb5cf66&view=current&aggregation=operators&gameMode=all,ranked,casual,unranked&platformGroup=CONSOLE&teamRole=attacker,defender&seasons=Y9S2
    // https://prod.datadev.ubisoft.com/v1/users/488cd0dd-b8e0-4718-a9da-2767ea44c399/playerstats?spaceId=05bfb3f7-6c21-4c42-be1f-97a33fb5cf66&view=current&aggregation=operators&gameMode=ranked,casual&platformGroup=CONSOLE&teamRole=defender,attacker&seasons=Y9S2
    const data = await (0, apiClient_1.ApiClient)(URI, header, 'GET');
    const operators = await ExtractOperators(await data, userId, gameMode, platformChange);
    return operators;
};
exports.GetOperator = GetOperator;
const ExtractOperators = async (data, userId, gameMode, platform) => {
    const gameModes = {
        ranked: {
            attackers: [],
            defenders: [],
        },
        unranked: {
            attackers: [],
            defenders: [],
        },
        all: {
            attackers: [],
            defenders: [],
        },
        casual: {
            attackers: [],
            defenders: [],
        },
    };
    const splitGameModes = gameMode.split(',');
    for (const mode of splitGameModes) {
        var profile = data.profileData[`${userId}`].platforms[`${platform}`].gameModes[`${mode}`]?.teamRoles ?? [];
        const attackers = profile.Attacker ?? {};
        const defenders = profile.Defender ?? {};
        const selectMode = gameModes[mode];
        if (attackers.length > 0) {
            const attackersPromise = attackers.map(async (operator) => {
                const operatorStats = await BuildOperator(operator);
                return operatorStats;
            });
            const resolvedAttackers = await Promise.all(attackersPromise);
            selectMode.attackers.push(...resolvedAttackers);
        }
        if (defenders.length > 0) {
            const defendersPromise = defenders.map(async (operator) => {
                const operatorStats = await BuildOperator(operator);
                return operatorStats;
            });
            const resolvedDefender = await Promise.all(defendersPromise);
            selectMode.defenders.push(...resolvedDefender);
        }
    }
    return gameModes;
};
const BuildOperator = async (operator) => {
    const stats = {
        type: operator.type,
        statsType: operator.statsType,
        statsDetail: operator.statsDetail,
        matchesPlayed: operator.matchesPlayed,
        roundsPlayed: operator.roundsPlayed,
        minutesPlayed: operator.minutesPlayed,
        matchesWon: operator.matchesWon,
        matchesLost: operator.matchesLost,
        roundsWon: operator.roundsWon,
        roundsLost: operator.roundsLost,
        kills: operator.kills,
        assists: operator.assists,
        deaths: operator.death,
        headshots: operator.headshots,
        meleeKills: operator.meleeKills,
        teamKills: operator.teamKills,
        openingKills: operator.openingKills,
        trades: operator.trades,
        openingKillTrades: operator.openingKillTrades,
        openingDeathTrades: operator.openingDeathTrades,
        revives: operator.revives,
        distanceTravelled: operator.distanceTravelled,
        winLossRatio: operator.winLossRatio,
        killDeathRatio: operator.killDeathRatio.value,
        headshotAccuracy: operator.headshotAccuracy.value,
        killsPerRound: operator.killsPerRound.value,
        roundsWithAKill: operator.killsPerRound.value,
        roundsWithMultiKill: operator.roundsWithMultiKill.value,
        roundsWithOpeningKill: operator.roundsWithOpeningKill.value,
        roundsWithOpeningDeath: operator.roundsWithOpeningDeath.value,
        roundsWithKOST: operator.roundsWithKOST.value,
        roundsSurvived: operator.roundsSurvived.value,
        roundsWithAnAce: operator.roundsWithAnAce.value,
        roundsWithClutch: operator.roundsWithClutch.value,
        timeAlivePerMatch: operator.timeAlivePerMatch,
        timeDeadPerMatch: operator.timeDeadPerMatch,
        distancePerRound: operator.distancePerRound,
    };
    return stats;
};
//# sourceMappingURL=getOperator.js.map