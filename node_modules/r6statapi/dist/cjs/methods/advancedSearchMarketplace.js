"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdvancedSearch = void 0;
const constants_1 = require("../constants");
const helperFunctions_1 = require("../utils/helperFunctions");
const apiClient_1 = require("./apiClient");
const auth_1 = require("./auth");
const AdvancedSearch = async (searchTerm, searchType, types, tags, sortBy, limit) => {
    var token = await (0, auth_1.CheckToken)();
    const query = searchTerm
        .split(' ')
        .map((word) => word + '*')
        .join(' ');
    const headers = {
        Authorization: `ubi_v1 t=${token}`,
        'Ubi-AppId': constants_1.UBI_APPID_Marketplace,
        'Ubi-SessionId': constants_1.UBI_SESSIONID_MARKETPLACE,
        'ubi-localecode': constants_1.UBI_LOCALECODE,
        'ubi-regionid': constants_1.UBI_REGIONID_MARKETPLACE,
        'x-platform-appid': constants_1.X_PLATFORM_APPID,
        'Content-Type': 'application/json',
    };
    const type = searchType === 'sell' ? 'GetSellableItems' : 'GetBuyableItems';
    const graphqlQuery = searchType === 'sell' ? constants_1.GraphQL_SellableItemsQuery : constants_1.GraphQL_BuyableItemQuery;
    var tagFilters = await BuildTagsFilterArray(tags);
    const newSortBy = await (0, helperFunctions_1.ReturnSortBy)(sortBy, searchType);
    const body = [
        {
            operationName: type,
            variables: {
                withOwnership: false,
                spaceId: '0d2ae42d-4c27-4cb7-af6c-2099062302bb',
                limit: limit,
                offset: 0,
                filterBy: {
                    text: query,
                    tags: tagFilters, // Filters: Rarity, season, operator, weapon, event, Esports team, , other
                    types: types.type,
                },
                sortBy: newSortBy,
            },
            query: graphqlQuery,
        },
    ];
    const response = await (0, apiClient_1.ApiClient)(constants_1.UBI_MARKETPLACE_URI, headers, 'POST', body);
    return await MapResults(response);
};
exports.AdvancedSearch = AdvancedSearch;
const BuildTagsFilterArray = async (tagsArray) => {
    const tags = [];
    const mappings = {
        rarity: helperFunctions_1.BuildItemRarity,
        seasons: null,
        operators: helperFunctions_1.BuildOperators,
        weapons: helperFunctions_1.BuildWeapons,
        events: helperFunctions_1.BuildEvents,
        EsportsTeams: helperFunctions_1.BuildEsportTeams,
        others: helperFunctions_1.BuildOtherTypes,
    };
    for (const [key, buildFunction] of Object.entries(mappings)) {
        const items = tagsArray[key];
        if (Array.isArray(items) && items.length > 0) {
            if (buildFunction)
                tags.push(await buildFunction(items));
            else
                tags.push(items);
        }
    }
    return tags;
};
const MapResults = async (data) => {
    const items = {
        items: [],
    };
    data.forEach((element) => {
        const itemDetails = element.data.game.viewer.meta;
        if (itemDetails.marketableItems && itemDetails.marketableItems.nodes.length > 0) {
            itemDetails.marketableItems.nodes.forEach(async (recItem) => {
                const tags = recItem.item.tags;
                const marketData = await (0, helperFunctions_1.MapMarketData)(recItem.marketData);
                const newItem = {
                    id: recItem.item.id,
                    assetUrl: recItem.item.assetUrl,
                    itemId: recItem.item.itemId,
                    name: recItem.item.name,
                    tags: tags,
                    type: recItem.item.type,
                    marktetData: marketData,
                };
                items.items.push(newItem);
            });
        }
    });
    return items;
};
//# sourceMappingURL=advancedSearchMarketplace.js.map