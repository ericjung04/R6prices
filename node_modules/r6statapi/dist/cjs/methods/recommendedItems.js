"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecommendedItems = void 0;
const auth_1 = require("./auth");
const constants_1 = require("../constants");
const apiClient_1 = require("./apiClient");
const helperFunctions_1 = require("../utils/helperFunctions");
const RecommendedItems = async (profileId, limit) => {
    var token = await (0, auth_1.CheckToken)();
    const headers = {
        Authorization: `ubi_v1 t=${token}`,
        'Ubi-AppId': constants_1.UBI_APPID_Marketplace,
        'Ubi-SessionId': constants_1.UBI_SESSIONID_MARKETPLACE,
        'ubi-localecode': constants_1.UBI_LOCALECODE,
        'ubi-regionid': constants_1.UBI_REGIONID_MARKETPLACE,
        'x-platform-appid': constants_1.X_PLATFORM_APPID,
        'ubi-profileId': profileId,
        'Content-Type': 'application/json',
    };
    const body = [
        {
            operationName: 'GetUserItemRecommendations',
            variables: {
                withOwnership: true,
                spaceId: '0d2ae42d-4c27-4cb7-af6c-2099062302bb',
                limit: limit,
                projectId: 'marketplace-user-recommendation',
                categoryId: 'default',
            },
            query: constants_1.GraphQL_RecommendedItemsQuery,
        },
    ];
    const response = await (0, apiClient_1.ApiClient)(constants_1.UBI_MARKETPLACE_URI, headers, 'POST', body);
    const results = await MapSearchResults(response);
    return results;
};
exports.RecommendedItems = RecommendedItems;
const MapSearchResults = async (data) => {
    const items = {
        items: [],
    };
    data.forEach((element) => {
        const itemDetails = element.data.game.viewer.meta;
        if (itemDetails.marketplaceRecommendations &&
            itemDetails.marketplaceRecommendations.nodes.length > 0) {
            itemDetails.marketplaceRecommendations.nodes.forEach(async (marketableItem) => {
                const tags = marketableItem.item.tags;
                const marketPlaceData = await (0, helperFunctions_1.MapMarketData)(marketableItem.marketData);
                const newItem = {
                    id: marketableItem.item.id,
                    assetUrl: marketableItem.item.assetUrl,
                    itemId: marketableItem.item.itemId,
                    name: marketableItem.item.name,
                    tags: tags,
                    type: marketableItem.item.type,
                    marktetData: marketPlaceData,
                };
                items.items.push(newItem);
            });
        }
    });
    return items;
};
//# sourceMappingURL=recommendedItems.js.map