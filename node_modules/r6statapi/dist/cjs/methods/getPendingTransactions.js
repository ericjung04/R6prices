"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetTransactionsPending = void 0;
const constants_1 = require("../constants");
const helperFunctions_1 = require("../utils/helperFunctions");
const apiClient_1 = require("./apiClient");
const auth_1 = require("./auth");
const GetTransactionsPending = async (profileId, limit) => {
    const token = await (0, auth_1.CheckToken)();
    const headers = {
        Authorization: `ubi_v1 t=${token}`,
        'Ubi-AppId': constants_1.UBI_APPID_Marketplace,
        'Ubi-SessionId': constants_1.UBI_SESSIONID_MARKETPLACE,
        'ubi-localecode': constants_1.UBI_LOCALECODE,
        'ubi-regionid': constants_1.UBI_REGIONID_MARKETPLACE,
        'x-platform-appid': constants_1.X_PLATFORM_APPID,
        'ubi-profileid': profileId,
        'Content-Type': 'application/json',
    };
    const body = [
        {
            operationName: 'GetTransactionsPending',
            variables: {
                spaceId: '0d2ae42d-4c27-4cb7-af6c-2099062302bb',
                limit: limit,
                offset: 0,
            },
            query: constants_1.GraphQL_GetTransactionsPending,
        },
    ];
    const response = await (0, apiClient_1.ApiClient)(constants_1.UBI_MARKETPLACE_URI, headers, 'POST', body);
    return await MapResults(response);
};
exports.GetTransactionsPending = GetTransactionsPending;
const MapResults = async (data) => {
    const transactions = {
        transactions: [],
    };
    data.forEach((element) => {
        const itemDetails = element.data.game.viewer.meta;
        if (itemDetails.trades && itemDetails.trades.nodes.length > 0) {
            itemDetails.trades.nodes.forEach(async (item) => {
                const tradeItems = item.tradeItems;
                const paymentOptions = item.paymentOptions;
                const transaction = {
                    id: item.id,
                    tradeId: item.tradeId,
                    state: item.state,
                    category: item.category,
                    createdAt: item.createdAt,
                    expiresAt: item.expiresAt,
                    lastModifiedAt: item.lastModifiedAt,
                    tradeItems: await (0, helperFunctions_1.BuildTradeItems)(tradeItems),
                    paymentOptions: await (0, helperFunctions_1.BuildPaymentOptions)(paymentOptions),
                };
                transactions.transactions.push(transaction);
            });
        }
    });
    return transactions;
};
//# sourceMappingURL=getPendingTransactions.js.map